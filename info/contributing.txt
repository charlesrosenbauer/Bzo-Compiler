This file is a quick explanation of how the code is organized and what work currently needs to get done, in order to help anyone seeking to contribute to the project quickly learn the structure and priorities. If you make any significant changes that should be noted here, please note them here.



High Priority Goals:
    * Get Compound and Enum modelling in ModelRules.hs working properly.
    * Add error reporting for improper usage of Record and Enum syntax
    * Get Function Modelling in ModelRules.hs working.
        * Expression Modelling
        * Pattern Modelling
        * Variable Hint Modelling
    * Get External Hint and REPL Modelling in ModelRules.hs working.

Medium Priority Goals:
    * Strictness Optimizations
    * Transition from using String to Text types
    * Paralellism Optimizations
    * Improve Error Messages (especially parsing errors!)

Long-Term Goals:
    * Finish AST Modelling Pass
    * Type Checker
    * Static Analysis Passes for Memory Management
    * Code Generator / LLVM Backend
    * Finish Runtime Environment (https://github.com/charlesrosenbauer/Bzo-Runtime-Library)
    * Implicit Parallelism
    * Unum (numerical type) support

In addition, a longer-term goal of the language is to have the compiler available as a library, much like how Jonathan Blow's "Jai" langauge does. A benefit of this is that it would make extremely customizeable and extensible development tools and build automation practical, as programmers could easily get detailed build information from the compiler. This library likely will require either a very good FFI to interface with Haskell, or a complete self-hosted rewrite of the compiler. The rewrite is probably the better option.


Directories:

  /dist   -- Output of the Cabal Build Script. Executable is in /dist/build/main

  /info   -- A Folder for files relating to documentation, plans, etc.

  /src    -- A Folder for Source code

  /tests  -- A Folder for Bzo code used to test to make sure the compiler generates the correct output


Source Files:

  bzo.hs
    Main file. Contains the REPL, main function, etc.

  Compiler.hs
    Contains functions that run through the compilation / evaluation pipeline.

  BzoLexer.hs
    Self-contained Lexer

  BzoParser.hs
    Control logic for the Self-Contained Parser
  
  BzoParserRules.hs
    Set of Parsing Rules

  BzoSyntax.hs
    Functions and definitions for the abstract syntax tree and related types.

  BzoTypes.hs
    Definitions and functions relating to the BzoPos, BzoErr, and BzoToken types.

  HigherOrder.hs
    Contains custom higher order functions

  BzoParameterParser.hs
    Logic for parsing command line parameters

  BzoPreprocessor.hs
    Logic for determining file dependencies and loading library files

  ModelRules.hs
    Due to the syntax of the language, an additional pass is required after parsing to create an AST that is easy to typecheck. This file contains logic for this pass.

  BzoTypeModeller.hs
    Mostly unused right now. Contains code for generating a faster symbol table.

  reducedast.hs and codegen.hs are also currently unused and are mostly placeholders with vague outlines for future code. They eventually will be used in code generation.

