Test #Module
LiterateTest #IncludeAs L

"A bunch of potential Bzo expressions for use in testing expression parsing"
"Many of these may show up in the standard library"

[N'.Num] +1 :: N' ;; N'
[n] +1  :: [n,  1]+

[N'.Num] +2 :: N' ;; N'
[n] +2  :: [n,  2]+

[N'.Num] *2 :: N' ;; N'
[n] *2  :: [n,  2]*

[N'.Num] /2 :: N' ;; N'
[n] /2  :: [n,  2]/

[N'.Num] %2 :: N' ;; N'
[n] %2  :: [n,  2]%

[N'.Num] %4 :: N' ;; N'
[n] %4  :: [n,  4]%

[N'.Num] %8 :: N' ;; N'
[n] %8  :: [n,  8]%

[N'.Num] %16:: N' ;; N'
[n] %16 :: [n, 16]%


? :: [Bl, A', A'] ;; A'
[True , l, _] ? :: l
[False, _, r] ? :: r

map :: [[:A'], [A' ;; B']] ;; [:B']
[arr, f] map :: arr f..

reduce :: [[:A'], B', [[A', B'] ;; B']] ;; B'
reduce :: [[:A'], B', [[A', B'] ;; B'], Int] ;; B'
[arr, x, f]    reduce :: [[0 arr, x] f, 1] reduce
[arr, x, f, i] reduce :: [[arr top, i]>, [[i arr, x] f, i +1] reduce, x]?

mkReduce :: [B', [[A', B'] ;; B']] ;; [[A'] ;; B']
[x, f] mkReduce :: ;arr{ [arr, x, f] reduce }
